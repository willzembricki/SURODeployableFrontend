{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nexport const useDarkMode = () => {\n  _s();\n\n  const [theme, setTheme] = useState('light');\n  const [mountedComponent, setMountedComponenet] = useState(false);\n\n  const setMode = mode => {\n    window.localStorage.setItem('theme', mode);\n    setTheme(mode);\n  };\n\n  const themeToggler = () => {\n    theme === 'light' ? setMode('dark') : setMode('light');\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    localTheme ? setTheme(localTheme) : setMode('light');\n    setMountedComponenet(true);\n  }, []);\n  return [theme, themeToggler, mountedComponent];\n};\n\n_s(useDarkMode, \"ijmzjiVxmA5td8AqS9atxP/lPIg=\");","map":{"version":3,"sources":["/Users/willzembricki/Flatiron/code/Phase3/ProjectDeploy/frontend/src/components/useDarkMode.js"],"names":["useEffect","useState","useDarkMode","theme","setTheme","mountedComponent","setMountedComponenet","setMode","mode","window","localStorage","setItem","themeToggler","localTheme","getItem"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,OAAD,CAAlC;AACA,QAAM,CAACI,gBAAD,EAAmBC,oBAAnB,IAA2CL,QAAQ,CAAC,KAAD,CAAzD;;AAEA,QAAMM,OAAO,GAAGC,IAAI,IAAI;AACpBC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCH,IAArC;AACAJ,IAAAA,QAAQ,CAACI,IAAD,CAAR;AACH,GAHD;;AAKA,QAAMI,YAAY,GAAG,MAAM;AACvBT,IAAAA,KAAK,KAAK,OAAV,GAAoBI,OAAO,CAAC,MAAD,CAA3B,GAAsCA,OAAO,CAAC,OAAD,CAA7C;AACH,GAFD;;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,UAAU,GAAGJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,OAA5B,CAAnB;AACAD,IAAAA,UAAU,GAAGT,QAAQ,CAACS,UAAD,CAAX,GAA0BN,OAAO,CAAC,OAAD,CAA3C;AACAD,IAAAA,oBAAoB,CAAC,IAAD,CAApB;AACH,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO,CAACH,KAAD,EAAQS,YAAR,EAAsBP,gBAAtB,CAAP;AACH,CApBM;;GAAMH,W","sourcesContent":["import { useEffect, useState } from 'react'\n\nexport const useDarkMode = () => {\n    const [theme, setTheme] = useState('light')\n    const [mountedComponent, setMountedComponenet] = useState(false)\n\n    const setMode = mode => {\n        window.localStorage.setItem('theme', mode)\n        setTheme(mode)\n    }\n\n    const themeToggler = () => {\n        theme === 'light' ? setMode('dark') : setMode('light')\n    }\n\n    useEffect(() => {\n        const localTheme = window.localStorage.getItem('theme')\n        localTheme ? setTheme(localTheme) : setMode('light')\n        setMountedComponenet(true)\n    }, [])\n\n    return [theme, themeToggler, mountedComponent]\n}"]},"metadata":{},"sourceType":"module"}